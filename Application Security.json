{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Protection List"
					},
					"Parameters": [
						"SqlInjectionProtectionParam",
						"CrossSiteScriptingProtectionParam",
						"ActivateHttpFloodProtectionParam",
						"ActivateScansProbesProtectionParam",
						"ActivateReputationListsProtectionParam",
						"ActivateBadBotProtectionParam"
					]
				},
				{
					"Label": {
						"default": "Settings"
					},
					"Parameters": [
						"AccessLogBucket"
					]
				},
				{
					"Label": {
						"default": "Advanced Settings"
					},
					"Parameters": [
						"RequestThreshold",
						"ErrorThreshold",
						"WAFBlockPeriod"
					]
				},
				{
					"Label": {
						"default": "Anonymous Metrics Request"
					},
					"Parameters": [
						"SendAnonymousUsageData"
					]
				}
			],
			"ParameterLabels": {
				"SqlInjectionProtectionParam": {
					"default": "Activate SQL Injection Protection"
				},
				"CrossSiteScriptingProtectionParam": {
					"default": "Activate Cross-site Scripting Protection"
				},
				"ActivateHttpFloodProtectionParam": {
					"default": "Activate HTTP Flood Protection"
				},
				"ActivateScansProbesProtectionParam": {
					"default": "Activate Scanner & Probe Protection"
				},
				"ActivateReputationListsProtectionParam": {
					"default": "Activate Reputation List Protection"
				},
				"ActivateBadBotProtectionParam": {
					"default": "Activate Bad Bot Protection"
				},
				"AccessLogBucket": {
					"default": "CloudFront Access Log Bucket Name"
				},
				"SendAnonymousUsageData": {
					"default": "Send Anonymous Usage Data"
				},
				"RequestThreshold": {
					"default": "Request Threshold"
				},
				"ErrorThreshold": {
					"default": "Error Threshold"
				},
				"WAFBlockPeriod": {
					"default": "WAF Block Period"
				}
			}
		}
	},
	"Parameters": {
		"SqlInjectionProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to enable the component designed to block common SQL injection attacks."
		},
		"CrossSiteScriptingProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to enable the component designed to block common XSS attacks."
		},
		"ActivateHttpFloodProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to enable the component designed to block HTTP flood attacks."
		},
		"ActivateScansProbesProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to enable the component designed to block scanners and probes."
		},
		"ActivateReputationListsProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to block requests from IP addresses on third-party reputation lists (supported lists: spamhaus, torproject, and emergingthreats)."
		},
		"ActivateBadBotProtectionParam": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Choose yes to enable the component designed to block bad bots and content scrapers."
		},
		"AccessLogBucket": {
			"Type": "String",
			"Default": "",
			"AllowedPattern": "(^$|^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d]$)",
			"Description": "Enter a name for the Amazon S3 bucket where you want to store Amazon CloudFront access logs. This can be the name of either an existing S3 bucket, or a new bucket that the template will create during stack launch (if it does not find a matching bucket name). The solution will modify the bucketâ€™s notification configuration to trigger the Log Parser AWS Lambda function whenever a new log file is saved in this bucket. More about bucket name restriction here: http://amzn.to/1p1YlU5"
		},
		"SendAnonymousUsageData": {
			"Type": "String",
			"Default": "yes",
			"AllowedValues": [
				"yes",
				"no"
			],
			"Description": "Send anonymous data to AWS to help us understand solution usage across our customer base as a whole. To opt out of this feature, select No."
		},
		"RequestThreshold": {
			"Type": "Number",
			"Default": "2000",
			"MinValue": "2000",
			"Description": "If you chose yes for the Activate HTTP Flood Protection parameter, enter the maximum acceptable requests per FIVE-minute period per IP address. Minimum value of 2000. If you chose to deactivate this protection, ignore this parameter."
		},
		"ErrorThreshold": {
			"Type": "Number",
			"Default": "50",
			"MinValue": "0",
			"Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter the maximum acceptable bad requests per minute per IP. If you chose to deactivate Scanners & Probes protection, ignore this parameter."
		},
		"WAFBlockPeriod": {
			"Type": "Number",
			"Default": "240",
			"MinValue": "0",
			"Description": "If you chose yes for the Activate Scanners & Probes Protection parameters, enter the period (in minutes) to block applicable IP addresses. If you chose to deactivate this protection, ignore this parameter."
		}
	},
	"Conditions": {
		"SqlInjectionProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "SqlInjectionProtectionParam"
				},
				"yes"
			]
		},
		"CrossSiteScriptingProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "CrossSiteScriptingProtectionParam"
				},
				"yes"
			]
		},
		"HttpFloodProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "ActivateHttpFloodProtectionParam"
				},
				"yes"
			]
		},
		"ScansProbesProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "ActivateScansProbesProtectionParam"
				},
				"yes"
			]
		},
		"ReputationListsProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "ActivateReputationListsProtectionParam"
				},
				"yes"
			]
		},
		"BadBotProtectionActivated": {
			"Fn::Equals": [
				{
					"Ref": "ActivateBadBotProtectionParam"
				},
				"yes"
			]
		},
		"LogParserActivated": {
			"Fn::Equals": [
				{
					"Ref": "ActivateScansProbesProtectionParam"
				},
				"yes"
			]
		},
		"CreateWebACL": {
			"Fn::Or": [
				{
					"Condition": "SqlInjectionProtectionActivated"
				},
				{
					"Condition": "CrossSiteScriptingProtectionActivated"
				},
				{
					"Condition": "HttpFloodProtectionActivated"
				},
				{
					"Condition": "ScansProbesProtectionActivated"
				},
				{
					"Condition": "ReputationListsProtectionActivated"
				},
				{
					"Condition": "BadBotProtectionActivated"
				}
			]
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.1.0.0/16",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.1.0.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.1.1.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"GatewayToInternet": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "GatewayToInternet",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicSubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundDynamicPortsPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation1": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"WAFWhitelistSet": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "CreateWebACL",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Whitelist Set"
						]
					]
				}
			}
		},
		"WAFBlacklistSet": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "LogParserActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Blacklist Set"
						]
					]
				}
			}
		},
		"WAFScansProbesSet": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "LogParserActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Scans Probes Set"
						]
					]
				}
			}
		},
		"WAFReputationListsSet1": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "ReputationListsProtectionActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"IP Reputation Lists Set #1"
						]
					]
				}
			}
		},
		"WAFReputationListsSet2": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "ReputationListsProtectionActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"IP Reputation Lists Set #2"
						]
					]
				}
			}
		},
		"WAFBadBotSet": {
			"Type": "AWS::WAF::IPSet",
			"Condition": "BadBotProtectionActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"IP Bad Bot Set"
						]
					]
				}
			}
		},
		"WAFSqlInjectionDetection": {
			"Type": "AWS::WAF::SqlInjectionMatchSet",
			"Condition": "SqlInjectionProtectionActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"SQL injection Detection"
						]
					]
				},
				"SqlInjectionMatchTuples": [
					{
						"FieldToMatch": {
							"Type": "QUERY_STRING"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "QUERY_STRING"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "BODY"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "BODY"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "URI"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "URI"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Cookie"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Cookie"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Authorization"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Authorization"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					}
				]
			}
		},
		"WAFXssDetection": {
			"Type": "AWS::WAF::XssMatchSet",
			"Condition": "CrossSiteScriptingProtectionActivated",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"XSS Detection Detection"
						]
					]
				},
				"XssMatchTuples": [
					{
						"FieldToMatch": {
							"Type": "QUERY_STRING"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "QUERY_STRING"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "BODY"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "BODY"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "URI"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "URI"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Cookie"
						},
						"TextTransformation": "URL_DECODE"
					},
					{
						"FieldToMatch": {
							"Type": "HEADER",
							"Data": "Cookie"
						},
						"TextTransformation": "HTML_ENTITY_DECODE"
					}
				]
			}
		},
		"WAFWhitelistRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "CreateWebACL",
			"DependsOn": "WAFWhitelistSet",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Whitelist Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsWhitelistRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFWhitelistSet"
						},
						"Negated": false,
						"Type": "IPMatch"
					}
				]
			}
		},
		"WAFBlacklistRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "LogParserActivated",
			"DependsOn": "WAFBlacklistSet",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Blacklist Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsBlacklistRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFBlacklistSet"
						},
						"Negated": false,
						"Type": "IPMatch"
					}
				]
			}
		},
		"WAFScansProbesRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "LogParserActivated",
			"DependsOn": "WAFScansProbesSet",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Scans Probes Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsScansProbesRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFScansProbesSet"
						},
						"Negated": false,
						"Type": "IPMatch"
					}
				]
			}
		},
		"WAFIPReputationListsRule1": {
			"Type": "AWS::WAF::Rule",
			"Condition": "ReputationListsProtectionActivated",
			"DependsOn": "WAFReputationListsSet1",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"WAF IP Reputation Lists Rule #1"
						]
					]
				},
				"MetricName": "SecurityAutomationsIPReputationListsRule1",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFReputationListsSet1"
						},
						"Type": "IPMatch",
						"Negated": "false"
					}
				]
			}
		},
		"WAFIPReputationListsRule2": {
			"Type": "AWS::WAF::Rule",
			"Condition": "ReputationListsProtectionActivated",
			"DependsOn": "WAFReputationListsSet2",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"WAF IP Reputation Lists Rule #2"
						]
					]
				},
				"MetricName": "SecurityAutomationsIPReputationListsRule2",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFReputationListsSet2"
						},
						"Type": "IPMatch",
						"Negated": "false"
					}
				]
			}
		},
		"WAFBadBotRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": "WAFBadBotSet",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"Bad Bot Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsBadBotRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFBadBotSet"
						},
						"Type": "IPMatch",
						"Negated": "false"
					}
				]
			}
		},
		"WAFSqlInjectionRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "SqlInjectionProtectionActivated",
			"DependsOn": "WAFSqlInjectionDetection",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"SQL Injection Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsSqlInjectionRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFSqlInjectionDetection"
						},
						"Negated": false,
						"Type": "SqlInjectionMatch"
					}
				]
			}
		},
		"WAFXssRule": {
			"Type": "AWS::WAF::Rule",
			"Condition": "CrossSiteScriptingProtectionActivated",
			"DependsOn": "WAFXssDetection",
			"Properties": {
				"Name": {
					"Fn::Join": [
						" - ",
						[
							{
								"Ref": "AWS::StackName"
							},
							"XSS Rule"
						]
					]
				},
				"MetricName": "SecurityAutomationsXssRule",
				"Predicates": [
					{
						"DataId": {
							"Ref": "WAFXssDetection"
						},
						"Negated": false,
						"Type": "XssMatch"
					}
				]
			}
		},
		"WAFWebACL": {
			"Type": "AWS::WAF::WebACL",
			"Condition": "CreateWebACL",
			"DependsOn": [
				"WAFWhitelistRule"
			],
			"Properties": {
				"Name": {
					"Ref": "AWS::StackName"
				},
				"DefaultAction": {
					"Type": "ALLOW"
				},
				"MetricName": "SecurityAutomationsMaliciousRequesters",
				"Rules": [
					{
						"Action": {
							"Type": "ALLOW"
						},
						"Priority": 10,
						"RuleId": {
							"Ref": "WAFWhitelistRule"
						}
					}
				]
			}
		},
		"LambdaRoleLogParser": {
			"Type": "AWS::IAM::Role",
			"Condition": "LogParserActivated",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3Access",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "s3:GetObject",
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:s3:::",
												{
													"Ref": "AccessLogBucket"
												},
												"/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "S3AccessPut",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "s3:PutObject",
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:s3:::",
												{
													"Ref": "AccessLogBucket"
												},
												"/aws-waf-security-automations-current-blocked-ips.json"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetChangeToken",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "waf:GetChangeToken",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetAndUpdateIPSet",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetIPSet",
										"waf:UpdateIPSet"
									],
									"Resource": [
										{
											"Fn::Join": [
												"",
												[
													"arn:aws:waf::",
													{
														"Ref": "AWS::AccountId"
													},
													":ipset/",
													{
														"Ref": "WAFBlacklistSet"
													}
												]
											]
										},
										{
											"Fn::Join": [
												"",
												[
													"arn:aws:waf::",
													{
														"Ref": "AWS::AccountId"
													},
													":ipset/",
													{
														"Ref": "WAFScansProbesSet"
													}
												]
											]
										}
									]
								}
							]
						}
					},
					{
						"PolicyName": "LogsAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": {
										"Fn::Join": [
											":",
											[
												"arn:aws:logs",
												{
													"Ref": "AWS::Region"
												},
												{
													"Ref": "AWS::AccountId"
												},
												"log-group:/aws/lambda/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CloudWatchAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudwatch:GetMetricStatistics",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"LambdaWAFLogParserFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "LogParserActivated",
			"DependsOn": [
				"LambdaRoleLogParser",
				"WAFBlacklistSet",
				"WAFScansProbesSet"
			],
			"Properties": {
				"Description": {
					"Fn::Join": [
						"",
						[
							"This function parses CloudFront access logs to identify suspicious behavior, such as an abnormal amount of errors. It then blocks those IP addresses for a customer-defined period of time. Parameters: ",
							{
								"Ref": "ErrorThreshold"
							},
							",",
							{
								"Ref": "WAFBlockPeriod"
							},
							"."
						]
					]
				},
				"Handler": "log-parser.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRoleLogParser",
						"Arn"
					]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": [
							"-",
							[
								"solutions",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					},
					"S3Key": "aws-waf-security-automations/v2/log-parser.zip"
				},
				"Environment": {
					"Variables": {
						"OUTPUT_BUCKET": {
							"Ref": "AccessLogBucket"
						},
						"IP_SET_ID_BLACKLIST": {
							"Ref": "WAFBlacklistSet"
						},
						"IP_SET_ID_AUTO_BLOCK": {
							"Ref": "WAFScansProbesSet"
						},
						"BLACKLIST_BLOCK_PERIOD": {
							"Ref": "WAFBlockPeriod"
						},
						"ERROR_PER_MINUTE_LIMIT": {
							"Ref": "ErrorThreshold"
						},
						"SEND_ANONYMOUS_USAGE_DATA": {
							"Ref": "SendAnonymousUsageData"
						},
						"UUID": {
							"Fn::GetAtt": [
								"CreateUniqueID",
								"UUID"
							]
						},
						"LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION": "10000",
						"MAX_AGE_TO_UPDATE": "30",
						"REGION": {
							"Ref": "AWS::Region"
						},
						"LOG_TYPE": "cloudfront"
					}
				},
				"Runtime": "python2.7",
				"MemorySize": "512",
				"Timeout": "300"
			}
		},
		"LambdaInvokePermissionLogParser": {
			"Type": "AWS::Lambda::Permission",
			"Condition": "LogParserActivated",
			"DependsOn": "LambdaWAFLogParserFunction",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"LambdaWAFLogParserFunction",
						"Arn"
					]
				},
				"Action": "lambda:*",
				"Principal": "s3.amazonaws.com",
				"SourceAccount": {
					"Ref": "AWS::AccountId"
				}
			}
		},
		"LambdaRoleReputationListsParser": {
			"Type": "AWS::IAM::Role",
			"Condition": "ReputationListsProtectionActivated",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "CloudWatchLogs",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": {
										"Fn::Join": [
											":",
											[
												"arn:aws:logs",
												{
													"Ref": "AWS::Region"
												},
												{
													"Ref": "AWS::AccountId"
												},
												"log-group:/aws/lambda/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetChangeToken",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "waf:GetChangeToken",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetAndUpdateIPSet",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetIPSet",
										"waf:UpdateIPSet"
									],
									"Resource": [
										{
											"Fn::Join": [
												"",
												[
													"arn:aws:waf::",
													{
														"Ref": "AWS::AccountId"
													},
													":ipset/",
													{
														"Ref": "WAFReputationListsSet1"
													}
												]
											]
										},
										{
											"Fn::Join": [
												"",
												[
													"arn:aws:waf::",
													{
														"Ref": "AWS::AccountId"
													},
													":ipset/",
													{
														"Ref": "WAFReputationListsSet2"
													}
												]
											]
										}
									]
								}
							]
						}
					},
					{
						"PolicyName": "CloudFormationAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudformation:DescribeStacks",
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:cloudformation:",
												{
													"Ref": "AWS::Region"
												},
												":",
												{
													"Ref": "AWS::AccountId"
												},
												":stack/",
												{
													"Ref": "AWS::StackName"
												},
												"/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CloudWatchAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudwatch:GetMetricStatistics",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"LambdaWAFReputationListsParserFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "ReputationListsProtectionActivated",
			"DependsOn": "LambdaRoleReputationListsParser",
			"Properties": {
				"Description": "This lambda function checks third-party IP reputation lists hourly for new IP ranges to block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list.",
				"Handler": "reputation-lists-parser.handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRoleReputationListsParser",
						"Arn"
					]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": [
							"-",
							[
								"solutions",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					},
					"S3Key": "aws-waf-security-automations/v3/reputation-lists-parser.zip"
				},
				"Runtime": "nodejs6.10",
				"MemorySize": "128",
				"Timeout": "300",
				"Environment": {
					"Variables": {
						"SEND_ANONYMOUS_USAGE_DATA": {
							"Ref": "SendAnonymousUsageData"
						},
						"UUID": {
							"Fn::GetAtt": [
								"CreateUniqueID",
								"UUID"
							]
						}
					}
				}
			}
		},
		"LambdaWAFReputationListsParserEventsRule": {
			"Type": "AWS::Events::Rule",
			"Condition": "ReputationListsProtectionActivated",
			"DependsOn": [
				"LambdaWAFReputationListsParserFunction",
				"WAFReputationListsSet1",
				"WAFReputationListsSet2"
			],
			"Properties": {
				"Description": "Security Automations - WAF Reputation Lists",
				"ScheduleExpression": "rate(1 hour)",
				"Targets": [
					{
						"Arn": {
							"Fn::GetAtt": [
								"LambdaWAFReputationListsParserFunction",
								"Arn"
							]
						},
						"Id": "LambdaWAFReputationListsParserFunction",
						"Input": {
							"Fn::Join": [
								"",
								[
									"{\"lists\":",
									"[{\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},{\"url\":\"https://check.torproject.org/exit-addresses\",\"prefix\":\"ExitAddress \"},{\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}]",
									",\"logType\":\"cloudfront\"",
									",\"region\":\"",
									{
										"Ref": "AWS::Region"
									},
									"\",",
									"\"ipSetIds\": [",
									"\"",
									{
										"Ref": "WAFReputationListsSet1"
									},
									"\",",
									"\"",
									{
										"Ref": "WAFReputationListsSet2"
									},
									"\"",
									"]}"
								]
							]
						}
					}
				]
			}
		},
		"LambdaInvokePermissionReputationListsParser": {
			"Type": "AWS::Lambda::Permission",
			"Condition": "ReputationListsProtectionActivated",
			"DependsOn": [
				"LambdaWAFReputationListsParserFunction",
				"LambdaWAFReputationListsParserEventsRule"
			],
			"Properties": {
				"FunctionName": {
					"Ref": "LambdaWAFReputationListsParserFunction"
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "events.amazonaws.com",
				"SourceArn": {
					"Fn::GetAtt": [
						"LambdaWAFReputationListsParserEventsRule",
						"Arn"
					]
				}
			}
		},
		"LambdaRoleBadBot": {
			"Type": "AWS::IAM::Role",
			"Condition": "BadBotProtectionActivated",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "WAFGetChangeToken",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "waf:GetChangeToken",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetAndUpdateIPSet",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetIPSet",
										"waf:UpdateIPSet"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:waf::",
												{
													"Ref": "AWS::AccountId"
												},
												":ipset/",
												{
													"Ref": "WAFBadBotSet"
												}
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "LogsAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": {
										"Fn::Join": [
											":",
											[
												"arn:aws:logs",
												{
													"Ref": "AWS::Region"
												},
												{
													"Ref": "AWS::AccountId"
												},
												"log-group:/aws/lambda/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CloudFormationAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudformation:DescribeStacks",
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:cloudformation:",
												{
													"Ref": "AWS::Region"
												},
												":",
												{
													"Ref": "AWS::AccountId"
												},
												":stack/",
												{
													"Ref": "AWS::StackName"
												},
												"/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CloudWatchAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudwatch:GetMetricStatistics",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"LambdaWAFBadBotParserFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": "LambdaRoleBadBot",
			"Properties": {
				"Description": "This lambda function will intercepts and inspects trap endpoint requests to extract its IP address, and then add it to an AWS WAF block list.",
				"Handler": "access-handler.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRoleBadBot",
						"Arn"
					]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": [
							"-",
							[
								"solutions",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					},
					"S3Key": "aws-waf-security-automations/v2/access-handler.zip"
				},
				"Environment": {
					"Variables": {
						"IP_SET_ID_BAD_BOT": {
							"Ref": "WAFBadBotSet"
						},
						"SEND_ANONYMOUS_USAGE_DATA": {
							"Ref": "SendAnonymousUsageData"
						},
						"UUID": {
							"Fn::GetAtt": [
								"CreateUniqueID",
								"UUID"
							]
						},
						"REGION": {
							"Ref": "AWS::Region"
						},
						"LOG_TYPE": "cloudfront"
					}
				},
				"Runtime": "python2.7",
				"MemorySize": "128",
				"Timeout": "300"
			}
		},
		"LambdaInvokePermissionBadBot": {
			"Type": "AWS::Lambda::Permission",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": "LambdaWAFBadBotParserFunction",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"LambdaWAFBadBotParserFunction",
						"Arn"
					]
				},
				"Action": "lambda:*",
				"Principal": "apigateway.amazonaws.com"
			}
		},
		"ApiGatewayBadBot": {
			"Type": "AWS::ApiGateway::RestApi",
			"Condition": "BadBotProtectionActivated",
			"Properties": {
				"Name": "Security Automations - WAF Bad Bot API",
				"Description": "API created by AWS WAF Security Automations CloudFormation template. This endpoint will be used to capture bad bots."
			}
		},
		"ApiGatewayBadBotResource": {
			"Type": "AWS::ApiGateway::Resource",
			"Condition": "BadBotProtectionActivated",
			"Properties": {
				"RestApiId": {
					"Ref": "ApiGatewayBadBot"
				},
				"ParentId": {
					"Fn::GetAtt": [
						"ApiGatewayBadBot",
						"RootResourceId"
					]
				},
				"PathPart": "{proxy+}"
			}
		},
		"ApiGatewayBadBotMethodRoot": {
			"Type": "AWS::ApiGateway::Method",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": [
				"LambdaWAFBadBotParserFunction",
				"LambdaInvokePermissionBadBot",
				"ApiGatewayBadBot"
			],
			"Properties": {
				"RestApiId": {
					"Ref": "ApiGatewayBadBot"
				},
				"ResourceId": {
					"Fn::GetAtt": [
						"ApiGatewayBadBot",
						"RootResourceId"
					]
				},
				"HttpMethod": "ANY",
				"AuthorizationType": "NONE",
				"RequestParameters": {
					"method.request.header.X-Forwarded-For": false
				},
				"Integration": {
					"Type": "AWS_PROXY",
					"IntegrationHttpMethod": "POST",
					"Uri": {
						"Fn::Join": [
							"",
							[
								"arn:aws:apigateway:",
								{
									"Ref": "AWS::Region"
								},
								":lambda:path/2015-03-31/functions/",
								{
									"Fn::GetAtt": [
										"LambdaWAFBadBotParserFunction",
										"Arn"
									]
								},
								"/invocations"
							]
						]
					}
				}
			}
		},
		"ApiGatewayBadBotMethod": {
			"Type": "AWS::ApiGateway::Method",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": [
				"LambdaWAFBadBotParserFunction",
				"LambdaInvokePermissionBadBot",
				"ApiGatewayBadBot"
			],
			"Properties": {
				"RestApiId": {
					"Ref": "ApiGatewayBadBot"
				},
				"ResourceId": {
					"Ref": "ApiGatewayBadBotResource"
				},
				"HttpMethod": "ANY",
				"AuthorizationType": "NONE",
				"RequestParameters": {
					"method.request.header.X-Forwarded-For": false
				},
				"Integration": {
					"Type": "AWS_PROXY",
					"IntegrationHttpMethod": "POST",
					"Uri": {
						"Fn::Join": [
							"",
							[
								"arn:aws:apigateway:",
								{
									"Ref": "AWS::Region"
								},
								":lambda:path/2015-03-31/functions/",
								{
									"Fn::GetAtt": [
										"LambdaWAFBadBotParserFunction",
										"Arn"
									]
								},
								"/invocations"
							]
						]
					}
				}
			}
		},
		"ApiGatewayBadBotDeployment": {
			"Type": "AWS::ApiGateway::Deployment",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": "ApiGatewayBadBotMethod",
			"Properties": {
				"RestApiId": {
					"Ref": "ApiGatewayBadBot"
				},
				"Description": "CloudFormation Deployment Stage",
				"StageName": "CFDeploymentStage"
			}
		},
		"ApiGatewayBadBotStage": {
			"Type": "AWS::ApiGateway::Stage",
			"Condition": "BadBotProtectionActivated",
			"DependsOn": "ApiGatewayBadBotDeployment",
			"Properties": {
				"DeploymentId": {
					"Ref": "ApiGatewayBadBotDeployment"
				},
				"Description": "Production Stage",
				"RestApiId": {
					"Ref": "ApiGatewayBadBot"
				},
				"StageName": "ProdStage"
			}
		},
		"LambdaRoleCustomResource": {
			"Type": "AWS::IAM::Role",
			"Condition": "CreateWebACL",
			"DependsOn": "WAFWebACL",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3Access",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:CreateBucket",
										"s3:GetBucketLocation",
										"s3:GetBucketNotification",
										"s3:GetObject",
										"s3:ListBucket",
										"s3:PutBucketNotification"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:s3:::",
												{
													"Ref": "AccessLogBucket"
												}
											]
										]
									}
								}
							]
						}
					},
					{
						"Fn::If": [
							"ReputationListsProtectionActivated",
							{
								"PolicyName": "LambdaAccess",
								"PolicyDocument": {
									"Version": "2012-10-17",
									"Statement": [
										{
											"Effect": "Allow",
											"Action": "lambda:InvokeFunction",
											"Resource": {
												"Fn::GetAtt": [
													"LambdaWAFReputationListsParserFunction",
													"Arn"
												]
											}
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"PolicyName": "WAFAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetWebACL",
										"waf:UpdateWebACL"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:waf::",
												{
													"Ref": "AWS::AccountId"
												},
												":webacl/",
												{
													"Ref": "WAFWebACL"
												}
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFRuleAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetRule",
										"waf:GetIPSet",
										"waf:UpdateIPSet",
										"waf:UpdateWebACL"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:waf::",
												{
													"Ref": "AWS::AccountId"
												},
												":rule/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFIPSetAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetIPSet",
										"waf:UpdateIPSet"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:waf::",
												{
													"Ref": "AWS::AccountId"
												},
												":ipset/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFRateBasedRuleAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"waf:GetRateBasedRule",
										"waf:CreateRateBasedRule",
										"waf:DeleteRateBasedRule",
										"waf:ListRateBasedRules",
										"waf:UpdateWebACL"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:waf::",
												{
													"Ref": "AWS::AccountId"
												},
												":ratebasedrule/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CloudFormationAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "cloudformation:DescribeStacks",
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:aws:cloudformation:",
												{
													"Ref": "AWS::Region"
												},
												":",
												{
													"Ref": "AWS::AccountId"
												},
												":stack/",
												{
													"Ref": "AWS::StackName"
												},
												"/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "WAFGetChangeToken",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "waf:GetChangeToken",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "LogsAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": {
										"Fn::Join": [
											":",
											[
												"arn:aws:logs",
												{
													"Ref": "AWS::Region"
												},
												{
													"Ref": "AWS::AccountId"
												},
												"log-group:/aws/lambda/*"
											]
										]
									}
								}
							]
						}
					}
				]
			}
		},
		"LambdaWAFCustomResourceFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "CreateWebACL",
			"DependsOn": "LambdaRoleCustomResource",
			"Properties": {
				"Description": "This lambda function configures the Web ACL rules based on the features enabled in the CloudFormation template.",
				"Handler": "custom-resource.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRoleCustomResource",
						"Arn"
					]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": [
							"-",
							[
								"solutions",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					},
					"S3Key": "aws-waf-security-automations/v4/custom-resource.zip"
				},
				"Runtime": "python2.7",
				"MemorySize": "128",
				"Timeout": "300"
			}
		},
		"WafWebAclRuleControler": {
			"Type": "Custom::WafWebAclRuleControler",
			"Condition": "CreateWebACL",
			"DependsOn": [
				"LambdaWAFCustomResourceFunction",
				"WAFWebACL"
			],
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"LambdaWAFCustomResourceFunction",
						"Arn"
					]
				},
				"StackName": {
					"Ref": "AWS::StackName"
				},
				"WAFWebACL": {
					"Ref": "WAFWebACL"
				},
				"Region": {
					"Ref": "AWS::Region"
				},
				"LambdaWAFReputationListsParserFunction": {
					"Fn::If": [
						"ReputationListsProtectionActivated",
						{
							"Fn::GetAtt": [
								"LambdaWAFReputationListsParserFunction",
								"Arn"
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFWhitelistSet": {
					"Ref": "WAFWhitelistSet"
				},
				"WAFBlacklistSet": {
					"Fn::If": [
						"LogParserActivated",
						{
							"Ref": "WAFBlacklistSet"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFScansProbesSet": {
					"Fn::If": [
						"ScansProbesProtectionActivated",
						{
							"Ref": "WAFScansProbesSet"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFReputationListsSet1": {
					"Fn::If": [
						"ReputationListsProtectionActivated",
						{
							"Ref": "WAFReputationListsSet1"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFReputationListsSet2": {
					"Fn::If": [
						"ReputationListsProtectionActivated",
						{
							"Ref": "WAFReputationListsSet2"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFBadBotSet": {
					"Fn::If": [
						"BadBotProtectionActivated",
						{
							"Ref": "WAFBadBotSet"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"AccessLogBucket": {
					"Fn::If": [
						"LogParserActivated",
						{
							"Ref": "AccessLogBucket"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"LambdaWAFLogParserFunction": {
					"Fn::If": [
						"LogParserActivated",
						{
							"Fn::GetAtt": [
								"LambdaWAFLogParserFunction",
								"Arn"
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFWhitelistRule": {
					"Fn::If": [
						"CreateWebACL",
						{
							"Ref": "WAFWhitelistRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFBlacklistRule": {
					"Fn::If": [
						"LogParserActivated",
						{
							"Ref": "WAFBlacklistRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFScansProbesRule": {
					"Fn::If": [
						"LogParserActivated",
						{
							"Ref": "WAFScansProbesRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFIPReputationListsRule1": {
					"Fn::If": [
						"ReputationListsProtectionActivated",
						{
							"Ref": "WAFIPReputationListsRule1"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFIPReputationListsRule2": {
					"Fn::If": [
						"ReputationListsProtectionActivated",
						{
							"Ref": "WAFIPReputationListsRule2"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFBadBotRule": {
					"Fn::If": [
						"BadBotProtectionActivated",
						{
							"Ref": "WAFBadBotRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFSqlInjectionRule": {
					"Fn::If": [
						"SqlInjectionProtectionActivated",
						{
							"Ref": "WAFSqlInjectionRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"WAFXssRule": {
					"Fn::If": [
						"CrossSiteScriptingProtectionActivated",
						{
							"Ref": "WAFXssRule"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"SqlInjectionProtection": {
					"Ref": "SqlInjectionProtectionParam"
				},
				"CrossSiteScriptingProtection": {
					"Ref": "CrossSiteScriptingProtectionParam"
				},
				"ActivateHttpFloodProtection": {
					"Ref": "ActivateHttpFloodProtectionParam"
				},
				"ActivateScansProbesProtection": {
					"Ref": "ActivateScansProbesProtectionParam"
				},
				"ActivateReputationListsProtection": {
					"Ref": "ActivateReputationListsProtectionParam"
				},
				"ActivateBadBotProtection": {
					"Ref": "ActivateBadBotProtectionParam"
				},
				"RequestThreshold": {
					"Ref": "RequestThreshold"
				},
				"ErrorThreshold": {
					"Ref": "ErrorThreshold"
				},
				"WAFBlockPeriod": {
					"Ref": "WAFBlockPeriod"
				},
				"SendAnonymousUsageData": {
					"Ref": "SendAnonymousUsageData"
				},
				"UUID": {
					"Fn::GetAtt": [
						"CreateUniqueID",
						"UUID"
					]
				},
				"LOG_TYPE": "cloudfront"
			}
		},
		"SolutionHelperRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "lambda.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "Solution_Helper_Permissions",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": {
										"Fn::Join": [
											":",
											[
												"arn:aws:logs",
												{
													"Ref": "AWS::Region"
												},
												{
													"Ref": "AWS::AccountId"
												},
												"log-group:/aws/lambda/*"
											]
										]
									}
								}
							]
						}
					}
				]
			}
		},
		"SolutionHelper": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": "SolutionHelperRole",
			"Properties": {
				"Handler": "solution-helper.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"SolutionHelperRole",
						"Arn"
					]
				},
				"Description": "This lambda function executes generic common tasks to support this solution.",
				"Code": {
					"S3Bucket": {
						"Fn::Join": [
							"",
							[
								"solutions-",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					},
					"S3Key": "library/solution-helper/v1/solution-helper.zip"
				},
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},
		"CreateUniqueID": {
			"Type": "Custom::CreateUUID",
			"DependsOn": "SolutionHelper",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"SolutionHelper",
						"Arn"
					]
				},
				"Region": {
					"Ref": "AWS::Region"
				},
				"CreateUniqueID": "true"
			}
		},
		"WebappLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"LoadBalancerName": {
					"Fn::Join": [
						"-",
						[
							"web",
							{
								"Ref": "VPC"
							}
						]
					]
				},
				"SecurityGroups": [
					{
						"Ref": "PublicLoadBalancerSecurityGroup"
					}
				],
				"Subnets": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Listeners": [
					{
						"LoadBalancerPort": "80",
						"InstancePort": "80",
						"Protocol": "HTTP"
					}
				],
				"HealthCheck": {
					"Target": {
						"Fn::Join": [
							"",
							[
								"HTTP:80",
								"/"
							]
						]
					},
					"HealthyThreshold": "5",
					"UnhealthyThreshold": "3",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"PublicLoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP/HTTPS access on port 80/443 to 80/8080",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"WebappGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"AvailabilityZones": {
					"Fn::GetAZs": ""
				},
				"VPCZoneIdentifier": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"LaunchConfigurationName": {
					"Ref": "WebLaunchConfig"
				},
				"MinSize": "2",
				"MaxSize": "4",
				"DesiredCapacity": "2",
				"LoadBalancerNames": [
					{
						"Ref": "WebappLoadBalancer"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "Webb",
						"PropagateAtLaunch": "true"
					}
				]
			}
		},
		"CloudwatchRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/CloudWatchFullAccess"
				]
			}
		},
		"CloudwatchInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "CloudwatchRole"
					}
				]
			}
		},
		"WebLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Install": [
							"Install"
						]
					},
					"Install": {
						"packages": {
							"yum": {
								"httpd": [],
								"java-1.8.0-openjdk": [],
								"mysql": [],
								"tomcat8": [],
								"tomcat8-webapps": [],
								"tomcat8-docs-webapp": [],
								"tomcat8-admin-webapps": [],
								"git": [],
								"perl-Sys-Syslog": [],
								"perl-Switch": [],
								"perl-DateTime": [],
								"perl-LWP-Protocol-https": []
							}
						},
						"sources": {
							"/home/ec2-user": "https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip"
						},
						"files": {
							"/home/ec2-user/crontab": {
								"content": {
									"Fn::Join": [
										"",
										[
											"*/1 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --disk-path=/ --disk-space-avail",
											"\n",
											"*/1 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --mem-util",
											"\n"
										]
									]
								},
								"mode": "000600",
								"owner": "ec2-user",
								"group": "ec2-user"
							},
							"/var/www/html/index.html": {
								"content": {
									"Fn::Join": [
										"\n",
										[
											"<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/httpd/conf.d/tomcatvh.conf": {
								"content": {
									"Fn::Join": [
										"\n",
										[
											"<VirtualHost *:80>",
											"ProxyPass / http://localhost:8080/",
											"ProxyPassReverse / http://localhost:8080/",
											"</VirtualHost>"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.WebLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ",
											{
												"Ref": "AWS::StackName"
											},
											"         --resource WebLaunchConfig ",
											"         --configsets Install ",
											"         --region ",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								}
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								},
								"tomcat8": {
									"enabled": "true",
									"ensureRunning": "true"
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"SecurityGroups": [
					{
						"Ref": "InstanceSecurityGroup"
					}
				],
				"KeyName": "demo",
				"InstanceType": "t2.micro",
				"ImageId": "ami-76d6f519",
				"IamInstanceProfile": {
					"Ref": "CloudwatchInstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum install -y aws-cfn-bootstrap\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebLaunchConfig ",
								"         --configsets Install ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"update-alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java \n",
								"crontab -u ec2-user /home/ec2-user/crontab\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebappGroup ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			}
		},
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on the configured port",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "PublicLoadBalancerSecurityGroup"
						}
					},
					{
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"WebServerScaleUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebappGroup"
				},
				"Cooldown": "60",
				"ScalingAdjustment": "1"
			}
		},
		"WebServerScaleDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebappGroup"
				},
				"Cooldown": "60",
				"ScalingAdjustment": "-1"
			}
		},
		"WebCPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Maximum",
				"Period": "60",
				"EvaluationPeriods": "2",
				"Threshold": "80",
				"AlarmActions": [
					{
						"Ref": "WebServerScaleUpPolicy"
					}
				],
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebappGroup"
						}
					}
				],
				"ComparisonOperator": "GreaterThanThreshold"
			}
		},
		"WebCPUAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "2",
				"Threshold": "60",
				"AlarmActions": [
					{
						"Ref": "WebServerScaleDownPolicy"
					}
				],
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebappGroup"
						}
					}
				],
				"ComparisonOperator": "LessThanThreshold"
			}
		}
	}
}