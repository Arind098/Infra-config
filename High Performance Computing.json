{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Template for HPC. Beaware that the template has the hardcoded parameter values. Please change the KeyName and ImageId values as per your AWS account and continue with the template",
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.2.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"GatewayToInternet": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "GatewayToInternet",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicSubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundDynamicPortsPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation1": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		
		"AppServerRootRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [ {
                  "Effect": "Allow",
                 "Principal": {             
      		 "Service": [
        "ec2.amazonaws.com",        
        "s3.amazonaws.com"
			 ]
    },
                  
				 
				   "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
			 "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                    "Action": "s3:*",
                  "Resource": [
                
				 { "Fn::Join":[  
      "",
      ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]},
				{ "Fn::Join":[  
      "",
      ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/*"]]}
            ]
                  
                  } ]
               }
               } ]			 
         },
			"DependsOn": "S3Bucket"
      },
     
	  "mybucketpolicy" : {
   "Type" : "AWS::S3::BucketPolicy",
   "Properties" : {
        "Bucket" : { "Ref" : "S3Bucket" },
      "PolicyDocument" : {
         
         "Statement" : [ {            
            "Action" : "s3:*",
            "Effect" : "Allow",
            "Resource" : [
                
				 { "Fn::Join":[  
      "",
      ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]},
				{ "Fn::Join":[  
      "",
      ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/*"]]}
            ],
           "Principal":{             
      		 "Service": [
        "ec2.amazonaws.com",        
        "s3.amazonaws.com"
			 ]
    }
         } ]
      }
     
   }
},
"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "AppServerRootRole"
					}
				]
			}
		},
      
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Install": [
							"Install"
						]
					},
					"Install": {
						
						"files": {
							
							"/tmp/httpd1.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"*/5 * * * * aws s3 sync /usr/prod s3://" ,
											{ "Ref" : "S3Bucket" },
										
											"\n"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"role=",
											{
												"Ref": "AppServerRootRole"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ",
											{
												"Ref": "AWS::StackName"
											},
											"         --resource EC2Instance ",
											"         --configsets Install ",
											"         --region ",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								}
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				},
				"AWS::CloudFormation::Authentication" : {
         "S3AccessCreds" : {
            "type" : "S3",
			"roleName": { "Ref" : "AppServerRootRole"},
    		"buckets" : { "Ref" : "S3Bucket"}
            
         
      }
			}
						 
						 },
			"Properties": {
				"SecurityGroupIds": [
					{
						"Ref": "InstanceSecurityGroup"
					}
				],
				"KeyName": "test4",
				"ImageId": "ami-b70554c8",
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"InstanceType": "i2.4xlarge",
				"IamInstanceProfile": { "Ref": "InstanceProfile" },
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum install -y aws-cfn-bootstrap\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource EC2Instance ",
								"         --configsets Install ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"sudo su\n",															
								"mkdir /usr/prod\n",
								"touch /var/spool/cron/root\n",								
								"cat /tmp/httpd1.conf >> /var/spool/cron/root \n",								
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource EC2Instance ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			}
		},
		
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on the configured port",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		
		 "S3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private"
        
      },
      "DeletionPolicy" : "Retain"
    },
	"DatabaseSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Subnet for DB",
				"SubnetIds": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				]
			}
		},
		"MasterDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBSubnetGroupName": {
					"Ref": "DatabaseSubnetGroup"
				},
				"DBName": "demodb",
				"Engine": "MySQL",
				"MultiAZ": "false",
				"MasterUsername": "example",
				"DBInstanceClass": "db.t2.micro",
				"AllocatedStorage": "5",
				"MasterUserPassword": "Passw0rd",
				"VPCSecurityGroups": [
					{
						"Fn::GetAtt": [
							"DBEC2SecurityGroup",
							"GroupId"
						]
					}
				]
			},
			"DependsOn": "DatabaseSubnetGroup"
		},
		"DBEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable access to the RDS DB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "5432",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"DbSecurityGroupFromAppIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "DBEC2SecurityGroup"
				},
				"IpProtocol": "tcp",
				"ToPort": "5432",
				"FromPort": "3306",
				"SourceSecurityGroupId": {
					"Ref": "InstanceSecurityGroup"
				}
			}
		},
		
		
		"EBSNewVolume" : {
   "Type" : "AWS::EC2::Volume",
   "Properties" : {
      "Size" : "100",
      "Encrypted" : "true",
	  "VolumeType" : "io1",
     "Iops" : "100",
      "AvailabilityZone" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] },
      "Tags" : [ {
         "Key" : "MyTag",
         "Value" : "TagValue"
      } ]
   },

   "DeletionPolicy" : "Snapshot"
},
"MountPoint" : {
   "Type" : "AWS::EC2::VolumeAttachment",
   "Properties" : {
      "InstanceId" : { "Ref" : "EC2Instance" },
      "VolumeId"  : { "Ref" : "EBSNewVolume" },
      "Device" : "/dev/sdh"
   }
   }
	},
	
	"Outputs": {
		"BucketName": {
            "Value": {
                "Ref": "S3Bucket"
            },
            "Description": "S3  bucket name."
        },
		"MasterJDBCConnectionString": {
			"Description": "JDBC connection string for the master database",
			"Value": {
				"Fn::Join": [
					"",
					[
						"jdbc:mysql://",
						{
							"Fn::GetAtt": [
								"MasterDB",
								"Endpoint.Address"
							]
						},
						":",
						{
							"Fn::GetAtt": [
								"MasterDB",
								"Endpoint.Port"
							]
						},
						"/",
						"demodb"
					]
				]
			}
		}
		
	}
}