{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Example VPC that has two public subnets and two private subnets in different AZs NATs to enable instances in private subnets to access the internet and bastion hosts to moderate SSH access",
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.2.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"GatewayToInternet": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "GatewayToInternet",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicSubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundDynamicPortsPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation1": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.1.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.3.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateRouteTable1": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateRouteTable2": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateSubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable1"
				}
			}
		},
		"PrivateSubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable2"
				}
			}
		},
		"PrivateRoute1": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable1"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NatGateway1"
				}
			}
		},
		"PrivateRoute2": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable2"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NatGateway2"
				}
			}
		},
		"PrivateNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"InboundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"OutboundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation1": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"NatGateway1": {
			"DependsOn": "GatewayToInternet",
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ElasticIP1",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "PublicSubnet1"
				}
			}
		},
		"NatGateway2": {
			"DependsOn": "GatewayToInternet",
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ElasticIP2",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "PublicSubnet2"
				}
			}
		},
		"ElasticIP1": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"ElasticIP2": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"WebappLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"LoadBalancerName": {
					"Fn::Join": [
						"-",
						[
							"webapp",
							{
								"Ref": "VPC"
							}
						]
					]
				},
				"SecurityGroups": [
					{
						"Ref": "PublicLoadBalancerSecurityGroup"
					}
				],
				"Subnets": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Listeners": [
					{
						"LoadBalancerPort": "80",
						"InstancePort": "80",
						"Protocol": "HTTP"
					}
				],
				"HealthCheck": {
					"Target": {
						"Fn::Join": [
							"",
							[
								"HTTP:80",
								"/"
							]
						]
					},
					"HealthyThreshold": "5",
					"UnhealthyThreshold": "3",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"AppServerLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"LoadBalancerName": {
					"Fn::Join": [
						"-",
						[
							"app-server",
							{
								"Ref": "VPC"
							}
						]
					]
				},
				"SecurityGroups": [
					{
						"Ref": "AppServerLoadBalancerSecurityGroup"
					}
				],
				"Subnets": [
					{
						"Ref": "PrivateSubnet1"
					},
					{
						"Ref": "PrivateSubnet2"
					}
				],
				"Scheme": "internal",
				"Listeners": [
					{
						"LoadBalancerPort": "80",
						"InstancePort": "80",
						"Protocol": "HTTP"
					},
					{
						"LoadBalancerPort": "8080",
						"InstancePort": "8080",
						"Protocol": "TCP"
					}
				],
				"HealthCheck": {
					"Target": {
						"Fn::Join": [
							"",
							[
								"HTTP:80",
								"/"
							]
						]
					},
					"HealthyThreshold": "5",
					"UnhealthyThreshold": "3",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"AppServerLoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on port 80",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "InstanceSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId": {
							"Ref": "InstanceSecurityGroup"
						}
					}
				]
			}
		},
		"PublicLoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP/HTTPS access on port 80/443 to 80/8080",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"WebappGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				
				"VPCZoneIdentifier": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"LaunchConfigurationName": {
					"Ref": "WebLaunchConfig"
				},
				"MinSize": "2",
				"MaxSize": "4",
				"DesiredCapacity": "2",
				"LoadBalancerNames": [
					{
						"Ref": "WebappLoadBalancer"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "Webb",
						"PropagateAtLaunch": "true"
					}
				]
			}
		},
		"WebLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"httpd": []
							}
						},
						"files": {
							"/var/www/html/index.html": {
								"content": {
									"Fn::Join": [
										"\n",
										[
											"<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/httpd/conf.d/tomcatvh.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"<VirtualHost *:80>",
											"\n",
											"ProxyPass / http://",
											{
												"Fn::GetAtt": [
													"AppServerLoadBalancer",
													"DNSName"
												]
											},
											":8080",
											"\n",
											"ProxyPassReverse / http://",
											{
												"Fn::GetAtt": [
													"AppServerLoadBalancer",
													"DNSName"
												]
											},
											":8080",
											"\n",
											"</VirtualHost>"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.WebLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ",
											{
												"Ref": "AWS::StackName"
											},
											"         --resource WebLaunchConfig ",
											"         --region ",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								}
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"KeyName": "test3",
				"ImageId": "ami-14c5486b",
				"SecurityGroups": [
					{
						"Ref": "InstanceSecurityGroup"
					}
				],
				"InstanceType": "t2.micro",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum update -y aws-cfn-bootstrap\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebLaunchConfig ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebappGroup ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"service httpd stop\n",
								"service httpd start\n"
							]
						]
					}
				}
			},
			"DependsOn": "AppLaunchConfig"
		},
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on the configured port",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "PublicLoadBalancerSecurityGroup"
						}
					},
					{
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"AppServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				
				"VPCZoneIdentifier": [
					{
						"Ref": "PrivateSubnet1"
					},
					{
						"Ref": "PrivateSubnet2"
					}
				],
				"LaunchConfigurationName": {
					"Ref": "AppLaunchConfig"
				},
				"MinSize": "2",
				"MaxSize": "4",
				"DesiredCapacity": "2",
				"LoadBalancerNames": [
					{
						"Ref": "AppServerLoadBalancer"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "App",
						"PropagateAtLaunch": "true"
					}
				]
			}
		},
		"AppLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"Comment1": "Configure the Backend server to respond to requests",
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"httpd": [],
								"java-1.8.0-openjdk": [],
								"tomcat8": [],
								"tomcat8-webapps": [],
								"tomcat8-docs-webapp": [],
								"tomcat8-admin-webapps": []
							}
						},
						"files": {
							"/var/www/html/index.html": {
								"content": {
									"Fn::Join": [
										"\n",
										[
											"<img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
											"<h1>Congratulations, this request was served from the backend fleet</h1>"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/var/www/html/index.html"
									]
								},
								"tomcat8": {
									"enabled": "true",
									"ensureRunning": "true"
								}
							}
						}
					}
				}
			},
			"Properties": {
				"KeyName": "test3",
				"ImageId": "ami-14c5486b",
				"SecurityGroups": [
					{
						"Ref": "AppSecurityGroup"
					}
				],
				"InstanceType": "t2.micro",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -v\n",
								"yum update -y aws-cfn-bootstrap\n",
															
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource AppLaunchConfig ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
									
								},
								"         --resource AppServerGroup ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"service httpd stop\n",
								"service httpd start\n"
								
							]
						]
					}
				}
			}
		},
		"AppSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on the configured port",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"SourceSecurityGroupId": {
							"Ref": "InstanceSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "AppServerLoadBalancerSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId": {
							"Ref": "AppServerLoadBalancerSecurityGroup"
						}
					},
					{
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"SourceSecurityGroupId": {
							"Ref": "InstanceSecurityGroup"
						}
					}
				]
			}
		},
		
		"WebServerScaleUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebappGroup"
				},
				"Cooldown": "60",
				"ScalingAdjustment": "1"
			}
		},
		"WebServerScaleDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebappGroup"
				},
				"Cooldown": "60",
				"ScalingAdjustment": "-1"
			}
		},
		"WebCPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-up if CPU > 50% for 60 sec",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Maximum",
				"Period": "60",
				"EvaluationPeriods": "2",
				"Threshold": "50",
				"AlarmActions": [
					{
						"Ref": "WebServerScaleUpPolicy"
					}
				],
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebappGroup"
						}
					}
				],
				"ComparisonOperator": "GreaterThanThreshold"
			}
		},
		"WebCPUAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-down if CPU < 50% for 60 sec",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "2",
				"Threshold": "50",
				"AlarmActions": [
					{
						"Ref": "WebServerScaleDownPolicy"
					}
				],
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebappGroup"
						}
					}
				],
				"ComparisonOperator": "LessThanThreshold"
			}
		},
		"DatabaseSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Subnet for DB",
				"SubnetIds": [
					{
						"Ref": "PrivateSubnet1"
					},
					{
						"Ref": "PrivateSubnet2"
					}
				]
			}
		},
		"MasterDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBSubnetGroupName": {
					"Ref": "DatabaseSubnetGroup"
				},
				"DBName": "demodb",
				"Engine": "MySQL",
				"MultiAZ": "false",
				"MasterUsername": "example",
				"DBInstanceClass": "db.t2.micro",
				"AllocatedStorage": "5",
				"MasterUserPassword": "Passw0rd",
				"VPCSecurityGroups": [
					{
						"Fn::GetAtt": [
							"DBEC2SecurityGroup",
							"GroupId"
						]
					}
				]
			},
			"DependsOn": "DatabaseSubnetGroup"
		},
		"DBEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable access to the RDS DB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "5432",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"DbSecurityGroupFromAppIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "DBEC2SecurityGroup"
				},
				"IpProtocol": "tcp",
				"ToPort": "5432",
				"FromPort": "3306",
				"SourceSecurityGroupId": {
					"Ref": "AppSecurityGroup"
				}
			}
		}
	},
	"Outputs": {
		"URL": {
			"Description": "The URL of the website",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Fn::GetAtt": [
								"WebappLoadBalancer",
								"DNSName"
							]
						}
					]
				]
			}
		},
		"MasterJDBCConnectionString": {
			"Description": "JDBC connection string for the master database",
			"Value": {
				"Fn::Join": [
					"",
					[
						"jdbc:mysql://",
						{
							"Fn::GetAtt": [
								"MasterDB",
								"Endpoint.Address"
							]
						},
						":",
						{
							"Fn::GetAtt": [
								"MasterDB",
								"Endpoint.Port"
							]
						},
						"/",
						"demodb"
					]
				]
			}
		}
	}
}